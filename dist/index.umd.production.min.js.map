{"version":3,"file":"index.umd.production.min.js","sources":["../src/fields/InputCheckbox.tsx","../src/fields/InputEmail.tsx","../src/fields/InputPassword.tsx","../src/Helpers.ts","../src/fields/InputSelect.tsx","../src/fields/InputText.tsx","../src/fields/InputTextarea.tsx","../src/FormFields.tsx","../src/FormHeading.tsx","../src/FormButtonSubmit.tsx","../node_modules/style-inject/dist/style-inject.es.js","../src/MagicFormGenerator.tsx"],"sourcesContent":["// Import core\nimport React, { ReactElement, useEffect, useState } from 'react';\n\n// Import third parts\nimport { useFormContext } from 'react-hook-form';\nimport { FieldBase, FieldValidation } from '../types';\n\n// Import custom\n\nexport const InputCheckbox: React.FC<FieldBase> = (\n  props: FieldBase,\n): ReactElement => {\n  // const [invalid, setInvalid] = useState<boolean>(true);\n\n  const { register, errors, setValue, trigger } = useFormContext(); // retrieve all hook methods\n  const [validation, setValidation] = useState<FieldValidation>({});\n  const [checkboxValue, setCheckboxValue] = useState<boolean>(false);\n\n  // Build Validation Object\n  useEffect(() => {\n    // Copy reference props\n    const rawValidation = props.validation;\n\n    // Add regex for validate email pattern\n    setValidation(rawValidation);\n  }, []);\n\n  const handleCheckboxValue = () => {\n    // console.log('!checkboxValue', !checkboxValue);\n    setValue(props.name, !checkboxValue);\n\n    setCheckboxValue(!checkboxValue);\n    trigger();\n  };\n\n  return (\n    <>\n      <div className=\"fg__checkbox-wrapper\">\n        <input\n          id={props.id}\n          type=\"checkbox\"\n          className={\n            'form-control ' + (errors[props.name] ? 'is-invalid ' : ' ')\n          }\n          name={props.name}\n          checked={checkboxValue}\n          onChange={(_value: any) => {\n            // console.log('Checkbox onChange value:', value);\n          }}\n          autoComplete={props.autocomplete ? props.autocomplete : 'off'}\n          ref={register(validation)}\n        />\n        <span className=\"checkmark\" onClick={handleCheckboxValue}></span>\n        <div\n          className=\"fg__checkbox-text\"\n          dangerouslySetInnerHTML={{ __html: props.placeholder as string }}\n        />\n      </div>\n      <div className=\"invalid-feedback\">\n        {errors[props.name]?.type == 'required' ? (\n          <>\n            {errors[props.name]?.message === '' ? (\n              <span>Il campo è richiesto</span>\n            ) : (\n              <span>{errors[props.name]?.message}</span>\n            )}\n          </>\n        ) : (\n          <></>\n        )}\n      </div>\n    </>\n  );\n};\n\n// validationMessage\nexport default InputCheckbox;\n","// Import core\nimport React, { ReactElement, useEffect, useState } from 'react';\n\n// Import third parts\nimport { useFormContext } from 'react-hook-form';\n\n// Import custom\nimport { FieldBase, FieldValidation, ValidationValueMessage } from '../types';\n\n// Ract.FC<InputEmailProps>\nexport const InputEmail: React.FC<FieldBase> = (\n  props: FieldBase,\n): ReactElement => {\n  // const [invalid, setInvalid] = useState<boolean>(true);\n\n  const { register, errors, watch, setError, clearErrors } = useFormContext(); // retrieve all hook methods\n  const [validation, setValidation] = useState<FieldValidation>({});\n  const [minLength, setMinLength] = useState<number>(0);\n  const [maxLength, setMaxLength] = useState<number>(0);\n\n  // Build Validation Object\n  useEffect(() => {\n    // Copy reference props\n    const rawValidation = props.validation;\n\n    // If exists set minLength state for error message\n    if (props.validation.minLength) {\n      if ((props.validation.minLength as ValidationValueMessage).value) {\n        setMinLength(\n          parseInt(\n            (props.validation.minLength as ValidationValueMessage)\n              .value as string,\n          ),\n        );\n      } else {\n        setMinLength(parseInt(props.validation.minLength as string));\n      }\n    }\n\n    // If exists set maxLength state for error message\n    if (props.validation.maxLength) {\n      if ((props.validation.maxLength as ValidationValueMessage).value) {\n        setMaxLength(\n          parseInt(\n            (props.validation.maxLength as ValidationValueMessage)\n              .value as string,\n          ),\n        );\n      } else {\n        setMaxLength(parseInt(props.validation.maxLength as string));\n      }\n    }\n\n    // Normalize equalTo validation with validate method\n    if (\n      props.validation.equalTo !== undefined &&\n      (props.validation.equalTo as ValidationValueMessage).value\n    ) {\n      const equalToField = (props.validation.equalTo as ValidationValueMessage)\n        .value as string;\n      rawValidation.validate = (value: string) => value === watch(equalToField);\n    }\n\n    // Add regex for validate email pattern\n    setValidation({\n      ...rawValidation,\n      pattern: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/,\n    });\n  }, []);\n\n  // Update error object message for equalTo\n  useEffect(() => {\n    // console.log('useEFfect errors: ', errors);\n    if (\n      errors[props.name]?.type == 'validate' &&\n      (props.validation.equalTo as ValidationValueMessage).value\n    ) {\n      // console.log('useEFfect errors: ', errors);\n      setError('repeatEmail', {\n        type: 'equalTo',\n        message: 'I due indirizzi email devono coincidere',\n      });\n      clearErrors('validate');\n    }\n  }, [errors]);\n\n  return (\n    <>\n      <input\n        id={props.id}\n        type=\"email\"\n        className={'form-control ' + (errors[props.name] ? 'is-invalid ' : ' ')}\n        placeholder={props.placeholder}\n        name={props.name}\n        autoComplete={props.autocomplete ? props.autocomplete : 'off'}\n        ref={register(validation)}\n      />\n      <div className=\"invalid-feedback\">\n        {errors[props.name]?.type == 'required' ? (\n          <>\n            {errors[props.name]?.message === '' ? (\n              <span>Il campo email è richiesto</span>\n            ) : (\n              <span>{errors[props.name]?.message}</span>\n            )}\n          </>\n        ) : (\n          <></>\n        )}\n        {errors[props.name]?.type == 'minLength' ? (\n          <>\n            {errors[props.name]?.message === '' ? (\n              <span>La lunghezza minima è {minLength} caratteri</span>\n            ) : (\n              <span>{errors[props.name]?.message}</span>\n            )}\n          </>\n        ) : (\n          <></>\n        )}\n        {errors[props.name]?.type == 'maxLength' ? (\n          <>\n            {errors[props.name]?.message === '' ? (\n              <span>La lunghezza massima è {maxLength} caratteri</span>\n            ) : (\n              <span>{errors[props.name]?.message}</span>\n            )}\n          </>\n        ) : (\n          <></>\n        )}\n        {errors[props.name]?.type == 'pattern' ? (\n          <>\n            {errors[props.name]?.message === '' ? (\n              <span>Inserire un&aposindirizzo email valido</span>\n            ) : (\n              <span>{errors[props.name]?.message}</span>\n            )}\n          </>\n        ) : (\n          <></>\n        )}\n        {errors[props.name]?.type == 'validate' ? (\n          <>\n            {errors[props.name]?.message === '' ? (\n              <span>Rispettare le regole di validazione</span>\n            ) : (\n              <span>{errors[props.name]?.message}</span>\n            )}\n          </>\n        ) : (\n          <></>\n        )}\n        {errors[props.name]?.type == 'equalTo' ? (\n          <>\n            {errors[props.name]?.message === '' ? (\n              <span>I due campi devono essere uguali</span>\n            ) : (\n              <span>{errors[props.name]?.message}</span>\n            )}\n          </>\n        ) : (\n          <></>\n        )}\n      </div>\n    </>\n  );\n};\n\n// errors[props.name] && <span>Il campo è richiesto</span>\n\nexport default InputEmail;\n","// Import core\nimport React, { ReactElement, useEffect, useState } from 'react';\n\n// Import third parts\nimport { useFormContext, ValidationValueMessage } from 'react-hook-form';\n\n// Import custom\nimport { FieldBase, FieldValidation } from '../types';\n\nexport const InputPassword: React.FC<FieldBase> = (\n  props: FieldBase,\n): ReactElement => {\n  // const [invalid, setInvalid] = useState<boolean>(true);\n\n  const { register, errors, watch } = useFormContext(); // retrieve all hook methods\n\n  const [validation, setValidation] = useState<FieldValidation>({});\n  const [minLength, setMinLength] = useState<number>(0);\n  const [maxLength, setMaxLength] = useState<number>(0);\n\n  // Build Validation Object\n  // TODO Fare un custom hook per uesta serie di operazioni?\n  useEffect(() => {\n    // Copy reference props\n    const rawValidation = props.validation;\n\n    // If exists set minLength state for error message\n    if (props.validation.minLength) {\n      if ((props.validation.minLength as ValidationValueMessage).value) {\n        setMinLength(\n          parseInt(\n            (props.validation.minLength as ValidationValueMessage)\n              .value as string,\n          ),\n        );\n      } else {\n        setMinLength(parseInt(props.validation.minLength as string));\n      }\n    }\n\n    // If exists set maxLength state for error  message\n    if (props.validation.maxLength) {\n      if ((props.validation.maxLength as ValidationValueMessage).value) {\n        setMaxLength(\n          parseInt(\n            (props.validation.maxLength as ValidationValueMessage)\n              .value as string,\n          ),\n        );\n      } else {\n        setMaxLength(parseInt(props.validation.maxLength as string));\n      }\n    }\n\n    // Normalize equalTo validation with validate method\n    if (\n      props.validation.equalTo !== undefined &&\n      (props.validation.equalTo as ValidationValueMessage).value\n    ) {\n      const equalToField = (props.validation.equalTo as ValidationValueMessage)\n        .value as string;\n      rawValidation.validate = (value: string) => value === watch(equalToField);\n    }\n\n    // Add regex for validate email pattern\n    setValidation({\n      ...rawValidation,\n    });\n  }, []);\n\n  return (\n    <>\n      <input\n        id={props.id}\n        type=\"password\"\n        className={'form-control ' + (errors[props.name] ? 'is-invalid ' : ' ')}\n        placeholder={props.placeholder}\n        name={props.name}\n        autoComplete={props.autocomplete ? props.autocomplete : 'off'}\n        ref={register(validation)}\n      />\n      <div className=\"invalid-feedback\">\n        {errors[props.name]?.type == 'required' ? (\n          <>\n            {errors[props.name]?.message === '' ? (\n              <span>Il campo password è richiesto</span>\n            ) : (\n              <span>{errors[props.name]?.message}</span>\n            )}\n          </>\n        ) : (\n          <></>\n        )}\n        {errors[props.name]?.type == 'minLength' ? (\n          <>\n            {errors[props.name]?.message === '' ? (\n              <span>La lunghezza minima è {minLength} caratteri</span>\n            ) : (\n              <span>{errors[props.name]?.message}</span>\n            )}\n          </>\n        ) : (\n          <></>\n        )}\n        {errors[props.name]?.type == 'maxLength' ? (\n          <>\n            {errors[props.name]?.message === '' ? (\n              <span>La lunghezza massima è {maxLength} caratteri</span>\n            ) : (\n              <span>{errors[props.name]?.message}</span>\n            )}\n          </>\n        ) : (\n          <></>\n        )}\n        {errors[props.name]?.type == 'pattern' ? (\n          <>\n            {errors[props.name]?.message === '' ? (\n              <span>Rispettare le regole di formattazione</span>\n            ) : (\n              <span>{errors[props.name]?.message}</span>\n            )}\n          </>\n        ) : (\n          <></>\n        )}\n        {errors[props.name]?.type == 'validate' ? (\n          <>\n            {errors[props.name]?.message === '' ? (\n              <span>Rispettare le regole di validazione</span>\n            ) : (\n              <span>{errors[props.name]?.message}</span>\n            )}\n          </>\n        ) : (\n          <></>\n        )}\n        {errors[props.name]?.type == 'equalTo' ? (\n          <>\n            {errors[props.name]?.message === '' ? (\n              <span>I due campi devono essere uguali</span>\n            ) : (\n              <span>{errors[props.name]?.message}</span>\n            )}\n          </>\n        ) : (\n          <></>\n        )}\n      </div>\n    </>\n  );\n};\n\n// validationMessage\nexport default InputPassword;\n","import { FieldSelectData } from './types';\ninterface MessageDefault {\n  required: string;\n  minLength: string;\n  maxLength: string;\n  pattern: string;\n}\nexport const validationMessage: MessageDefault = {\n  required: 'Il campo {fieldName} è richiesto',\n  minLength: 'La lunghezza minima è {min} caratteri',\n  maxLength: 'La lunghezza massima è {max} caratteri',\n  pattern: 'Rispettare le regole di fomattazione',\n};\n\n// Get layout class by props\nexport const getLayoutValue = (layout: string): number => {\n  switch (layout) {\n    case '1':\n      return 1;\n    case '1/2':\n      return 0.5;\n    case '1/3':\n      return 0.33;\n    case '1/4':\n      return 0.25;\n    default:\n      return 1;\n  }\n};\n\nexport const getLayoutColClass = (layout: string): string => {\n  switch (layout) {\n    case '1':\n      return 'fg__col-full';\n    case '1/2':\n      return 'fg__col-half';\n    case '1/3':\n      return 'fg__col-third';\n    case '1/4':\n      return 'fg__col-fourth';\n    default:\n      return 'fg__col-full';\n  }\n};\n\n// Get default value from Select option list and return value\nexport const getSelectDefaultValue = (_data: FieldSelectData[]): string => {\n  return 'CO';\n};\n\ninterface Response {\n  status: boolean;\n  data: any;\n}\n\nexport const fetchData = async (url: string): Promise<Response> => {\n  const options: RequestInit = {};\n  try {\n    const response = await fetch(url, options);\n    const result = await response.json();\n    const res: Response = {\n      status: true,\n      data: result,\n    };\n    return res;\n  } catch (error) {\n    const response: Response = {\n      status: false,\n      data: [],\n    };\n    return response;\n  }\n};\n\nexport const onSubmitBackendCall = async (\n  url: string,\n  method: string,\n  data: any,\n): Promise<Response> => {\n  const getParams = new URLSearchParams(data);\n\n  let options: RequestInit = {};\n  if (method == 'GET') {\n    options = {\n      method: method,\n    };\n  } else {\n    options = {\n      method: method,\n      body: data,\n    };\n  }\n\n  try {\n    const response = await fetch(url + '?' + getParams, options);\n    const result = await response.json();\n    const res: Response = {\n      status: true,\n      data: result,\n    };\n    return res;\n  } catch (error) {\n    const response: Response = {\n      status: false,\n      data: [],\n    };\n    return response;\n  }\n};\n","// Import core\nimport React, { ReactElement, useEffect, useState } from 'react';\n\n// Import third parts\nimport { useFormContext } from 'react-hook-form';\n\n// Import custom\nimport {\n  FieldBase,\n  FieldSelectData,\n  FieldValidation,\n  ValidationValueMessage,\n} from '../types';\nimport { fetchData, getSelectDefaultValue } from '../Helpers';\n\nexport const InputSelect: React.FC<FieldBase> = (\n  props: FieldBase,\n): ReactElement => {\n  // Get <Select> data\n\n  // Form core\n  const { register, errors } = useFormContext(); // retrieve all hook methods\n\n  // State\n  const [validation, setValidation] = useState<FieldValidation>({});\n  const [loading, setLoading] = useState<boolean>(true);\n  const [optionData, setOptionData] = useState<FieldSelectData[]>([]);\n  const [defaultValue, setDefaultValue] = useState<string>('');\n\n  useEffect(() => {\n    let flag = false;\n    // console.log('props.validation.required', props.validation.required);\n    if ((props.validation.required as ValidationValueMessage).value) {\n      flag = true;\n    }\n    if (props.validation.required === true) {\n      flag = true;\n    }\n    if (flag) {\n      // console.log('Here select Name: ', props.name);\n      setValidation({\n        validate: (value: string) => {\n          if (value) {\n            return true;\n          } else {\n            return false;\n          }\n        },\n      });\n    }\n  }, [props.validation]);\n\n  useEffect(() => {\n    // No data: infinite loading\n    if (props.data?.length === 0 && !props.fetchDataFromUrl) {\n      // console.warn('MagicFormGenerator: nessuna opzione fornita per il Select');\n      return;\n    }\n\n    // Static data\n    if (props.data && props.data?.length > 0 && !props.fetchDataFromUrl) {\n      setOptionData(props.data as FieldSelectData[]);\n      setLoading(false);\n      return;\n    }\n\n    // Fetch data from url\n    if (props.fetchDataFromUrl) {\n      const fetchEffectData = async () => {\n        const res = await fetchData(props.fetchDataFromUrl as string);\n        if (res.status) {\n          setOptionData(res.data as FieldSelectData[]);\n          setLoading(false);\n        }\n        return res;\n      };\n\n      fetchEffectData();\n    }\n\n    // NB: If both data and url are set. Merge arrays:\n\n    // Dynamic data with fetch\n    // NB:\n    setOptionData(props.data as FieldSelectData[]);\n    const getDefaultValue = getSelectDefaultValue(\n      props.data as FieldSelectData[],\n    );\n    // console.log('getDefaultValue', getDefaultValue);\n    setDefaultValue(getDefaultValue);\n  }, [props.data]);\n\n  return (\n    <>\n      <div className=\"fg__select-wrapper\">\n        <select\n          id={props.id}\n          className={\n            'form-control ' +\n            'fg__input-select ' +\n            (errors[props.name] ? 'is-invalid ' : ' ')\n          }\n          name={props.name}\n          ref={register(validation)}\n          autoComplete={props.autocomplete ? props.autocomplete : 'off'}\n          disabled={loading}\n          defaultValue={defaultValue}\n        >\n          {props.placeholder ? (\n            <option value=\"\">{props.placeholder}</option>\n          ) : (\n            <></>\n          )}\n          {optionData.map((option: FieldSelectData, index: number) => {\n            return (\n              <option\n                key={index}\n                value={option.value}\n                disabled={option.disabled ? true : false}\n              >\n                {option.label}\n              </option>\n            );\n          })}\n        </select>\n        <div\n          className={\n            'loader ' + 'fg__input-select ' + (loading ? 'loader-active ' : ' ')\n          }\n        >\n          <span></span>\n        </div>\n      </div>\n      <div className=\"invalid-feedback\">\n        {errors[props.name]?.type == 'validate' ? (\n          <>\n            {(props?.validation?.required as ValidationValueMessage)\n              ?.message === '' ? (\n              <span>Selezionare un opzione</span>\n            ) : (\n              <span>\n                {\n                  (props?.validation?.required as ValidationValueMessage)\n                    ?.message\n                }\n              </span>\n            )}\n          </>\n        ) : (\n          <></>\n        )}\n      </div>\n    </>\n  );\n};\n\n// validationMessage\nexport default InputSelect;\n","// Import core\nimport React, { ReactElement, useEffect, useState } from 'react';\n\n// Import third parts\nimport { useFormContext } from 'react-hook-form';\n\n// Import custom\nimport { FieldBase, FieldValidation, ValidationValueMessage } from '../types';\n\nexport const InputText: React.FC<FieldBase> = (\n  props: FieldBase,\n): ReactElement => {\n  // const [invalid, setInvalid] = useState<boolean>(true);\n\n  const { register, errors, watch, setError, clearErrors } = useFormContext(); // retrieve all hook methods\n\n  const [validation, setValidation] = useState<FieldValidation>({});\n  const [minLength, setMinLength] = useState<number>(0);\n  const [maxLength, setMaxLength] = useState<number>(0);\n\n  // Build Validation Object\n  useEffect(() => {\n    // Copy reference props\n    const rawValidation = props.validation;\n\n    // If exists set minLength state for error message\n    if (props.validation.minLength) {\n      if ((props.validation.minLength as ValidationValueMessage).value) {\n        setMinLength(\n          parseInt(\n            (props.validation.minLength as ValidationValueMessage)\n              .value as string,\n          ),\n        );\n      } else {\n        setMinLength(parseInt(props.validation.minLength as string));\n      }\n    }\n\n    // If exists set maxLength state for error message\n    if (props.validation.maxLength) {\n      if ((props.validation.maxLength as ValidationValueMessage).value) {\n        setMaxLength(\n          parseInt(\n            (props.validation.maxLength as ValidationValueMessage)\n              .value as string,\n          ),\n        );\n      } else {\n        setMaxLength(parseInt(props.validation.maxLength as string));\n      }\n    }\n\n    // Normalize equalTo validation with validate method\n    if (\n      props.validation.equalTo !== undefined &&\n      (props.validation.equalTo as ValidationValueMessage).value\n    ) {\n      const equalToField = (props.validation.equalTo as ValidationValueMessage)\n        .value as string;\n      rawValidation.validate = (value: string) => value === watch(equalToField);\n    }\n\n    // Add regex for validate email pattern\n    setValidation(rawValidation);\n  }, []);\n\n  // Update error object message for equalTo\n  useEffect(() => {\n    if (\n      errors[props.name]?.type == 'validate' &&\n      (props.validation.equalTo as ValidationValueMessage).value\n    ) {\n      setError('repeatEmail', {\n        type: 'equalTo',\n        message: 'I due indirizzi email devono coincidere',\n      });\n      clearErrors('validate');\n    }\n  }, [errors]);\n\n  return (\n    <>\n      <input\n        id={props.id}\n        type=\"text\"\n        className={'form-control ' + (errors[props.name] ? 'is-invalid ' : ' ')}\n        placeholder={props.placeholder}\n        name={props.name}\n        autoComplete={props.autocomplete ? props.autocomplete : 'off'}\n        ref={register(validation)}\n      />\n      <div className=\"invalid-feedback\">\n        {errors[props.name]?.type == 'required' ? (\n          <>\n            {errors[props.name]?.message === '' ? (\n              <span>Il campo è richiesto</span>\n            ) : (\n              <span>{errors[props.name]?.message}</span>\n            )}\n          </>\n        ) : (\n          <></>\n        )}\n        {errors[props.name]?.type == 'minLength' ? (\n          <>\n            {errors[props.name]?.message === '' ? (\n              <span>La lunghezza minima è {minLength} caratteri</span>\n            ) : (\n              <span>{errors[props.name]?.message}</span>\n            )}\n          </>\n        ) : (\n          <></>\n        )}\n        {errors[props.name]?.type == 'maxLength' ? (\n          <>\n            {errors[props.name]?.message === '' ? (\n              <span>La lunghezza massima è {maxLength} caratteri</span>\n            ) : (\n              <span>{errors[props.name]?.message}</span>\n            )}\n          </>\n        ) : (\n          <></>\n        )}\n        {errors[props.name]?.type == 'pattern' ? (\n          <>\n            {errors[props.name]?.message === '' ? (\n              <span>Rispettare le regole di formattazione</span>\n            ) : (\n              <span>{errors[props.name]?.message}</span>\n            )}\n          </>\n        ) : (\n          <></>\n        )}\n        {errors[props.name]?.type == 'validate' ? (\n          <>\n            {errors[props.name]?.message === '' ? (\n              <span>Rispettare le regole di validazione</span>\n            ) : (\n              <span>{errors[props.name]?.message}</span>\n            )}\n          </>\n        ) : (\n          <></>\n        )}\n        {errors[props.name]?.type == 'equalTo' ? (\n          <>\n            {errors[props.name]?.message === '' ? (\n              <span>I due campi devono essere uguali</span>\n            ) : (\n              <span>{errors[props.name]?.message}</span>\n            )}\n          </>\n        ) : (\n          <></>\n        )}\n      </div>\n    </>\n  );\n};\n\n// validationMessage\nexport default InputText;\n","// Import core\nimport React, { ReactElement, useEffect, useState } from 'react';\n\n// Import third parts\nimport { useFormContext } from 'react-hook-form';\n\n// Import custom\nimport { FieldBase, FieldValidation, ValidationValueMessage } from '../types';\n\nexport const InputTextarea: React.FC<FieldBase> = (\n  props: FieldBase,\n): ReactElement => {\n  const { register, errors, watch, setError, clearErrors } = useFormContext(); // retrieve all hook methods\n  const [validation, setValidation] = useState<FieldValidation>({});\n  const [minLength, setMinLength] = useState<number>(0);\n  const [maxLength, setMaxLength] = useState<number>(0);\n\n  // Build Validation Object\n  useEffect(() => {\n    // Copy reference props\n    const rawValidation = props.validation;\n\n    // If exists set minLength state for error message\n    if (props.validation.minLength) {\n      if ((props.validation.minLength as ValidationValueMessage).value) {\n        setMinLength(\n          parseInt(\n            (props.validation.minLength as ValidationValueMessage)\n              .value as string,\n          ),\n        );\n      } else {\n        setMinLength(parseInt(props.validation.minLength as string));\n      }\n    }\n\n    // If exists set maxLength state for error message\n    if (props.validation.maxLength) {\n      if ((props.validation.maxLength as ValidationValueMessage).value) {\n        setMaxLength(\n          parseInt(\n            (props.validation.maxLength as ValidationValueMessage)\n              .value as string,\n          ),\n        );\n      } else {\n        setMaxLength(parseInt(props.validation.maxLength as string));\n      }\n    }\n\n    // Normalize equalTo validation with validate method\n    if (\n      props.validation.equalTo !== undefined &&\n      (props.validation.equalTo as ValidationValueMessage).value\n    ) {\n      const equalToField = (props.validation.equalTo as ValidationValueMessage)\n        .value as string;\n      rawValidation.validate = (value: string) => value === watch(equalToField);\n    }\n\n    // Add regex for validate email pattern\n    setValidation(rawValidation);\n  }, []);\n\n  // Update error object message for equalTo\n  useEffect(() => {\n    if (\n      errors[props.name]?.type == 'validate' &&\n      (props.validation.equalTo as ValidationValueMessage).value\n    ) {\n      setError('repeatEmail', {\n        type: 'equalTo',\n        message: 'I due campi devono coincidere',\n      });\n      clearErrors('validate');\n    }\n  }, [errors]);\n\n  return (\n    <>\n      <textarea\n        id={props.id}\n        className={'form-control ' + (errors[props.name] ? 'is-invalid ' : ' ')}\n        placeholder={props.placeholder}\n        name={props.name}\n        autoComplete={props.autocomplete ? props.autocomplete : 'off'}\n        ref={register(validation)}\n      />\n      <div className=\"invalid-feedback\">\n        {errors[props.name]?.type == 'required' ? (\n          <>\n            {errors[props.name]?.message === '' ? (\n              <span>Il campo è richiesto</span>\n            ) : (\n              <span>{errors[props.name]?.message}</span>\n            )}\n          </>\n        ) : (\n          <></>\n        )}\n        {errors[props.name]?.type == 'minLength' ? (\n          <>\n            {errors[props.name]?.message === '' ? (\n              <span>La lunghezza minima è {minLength} caratteri</span>\n            ) : (\n              <span>{errors[props.name]?.message}</span>\n            )}\n          </>\n        ) : (\n          <></>\n        )}\n        {errors[props.name]?.type == 'maxLength' ? (\n          <>\n            {errors[props.name]?.message === '' ? (\n              <span>La lunghezza massima è {maxLength} caratteri</span>\n            ) : (\n              <span>{errors[props.name]?.message}</span>\n            )}\n          </>\n        ) : (\n          <></>\n        )}\n        {errors[props.name]?.type == 'pattern' ? (\n          <>\n            {errors[props.name]?.message === '' ? (\n              <span>Rispettare le regole di formattazione</span>\n            ) : (\n              <span>{errors[props.name]?.message}</span>\n            )}\n          </>\n        ) : (\n          <></>\n        )}\n        {errors[props.name]?.type == 'validate' ? (\n          <>\n            {errors[props.name]?.message === '' ? (\n              <span>Rispettare le regole di validazione</span>\n            ) : (\n              <span>{errors[props.name]?.message}</span>\n            )}\n          </>\n        ) : (\n          <></>\n        )}\n        {errors[props.name]?.type == 'equalTo' ? (\n          <>\n            {errors[props.name]?.message === '' ? (\n              <span>I due campi devono essere uguali</span>\n            ) : (\n              <span>{errors[props.name]?.message}</span>\n            )}\n          </>\n        ) : (\n          <></>\n        )}\n      </div>\n    </>\n  );\n};\n\n// validationMessage\nexport default InputTextarea;\n","// Import core\nimport React, { ReactElement, useEffect, useState } from 'react';\n\n// Import third parts\n\n// Import custom\nimport InputCheckbox from './fields/InputCheckbox';\nimport InputEmail from './fields/InputEmail';\nimport InputPassword from './fields/InputPassword';\nimport InputSelect from './fields/InputSelect';\nimport InputText from './fields/InputText';\nimport InputTextarea from './fields/InputTextarea';\nimport { getLayoutColClass, getLayoutValue } from './Helpers';\nimport { Field, FormFieldsProps } from './types';\n\nexport const FormFields: React.FC<FormFieldsProps> = (\n  props: FormFieldsProps,\n): ReactElement => {\n  const { fields } = props;\n\n  const [rowFields, setRowFields] = useState<[Field[]] | null>(null);\n\n  useEffect(() => {\n    const row: any[] = [];\n    let val = 0;\n    let fieldsTemp: any[] = [];\n    fields.map((field: Field, index: number) => {\n      let fieldLayout = '';\n      if (!field.layout) {\n        fieldLayout = '1/2';\n      } else {\n        fieldLayout = field.layout;\n      }\n      const currentVal: number = getLayoutValue(fieldLayout);\n      val = val + currentVal;\n      fieldsTemp.push(field);\n      if (index > 0) {\n        const nextFieldVal: number = getLayoutValue(\n          fields[index - 1].layout as string,\n        );\n        if (val < 1 && val + nextFieldVal > 1) {\n          val = val + 1;\n        }\n      }\n      if (val >= 1) {\n        row.push(fieldsTemp);\n        fieldsTemp = [];\n        val = 0;\n      }\n      if (index === fields.length - 1) {\n        row.push(fieldsTemp);\n      }\n    });\n\n    setRowFields(row as [Field[]]);\n  }, []);\n\n  return (\n    <div className=\"fg__fields fg__body\">\n      {rowFields &&\n        rowFields.map(\n          (fields: Field[], index: number): ReactElement => {\n            return (\n              <div className=\"row\" key={index}>\n                {fields.map((field: Field, index: number) => {\n                  const colName = getLayoutColClass(field.layout as string);\n                  return (\n                    <div className={colName} key={index}>\n                      <div className=\"fg__fields-field\">\n                        <>\n                          {field.type == 'text' ? (\n                            <InputText\n                              name={field.name}\n                              id={field.id}\n                              placeholder={field.placeholder}\n                              validation={field.validation}\n                              autocomplete={field.autocomplete}\n                              label={field.label}\n                            />\n                          ) : (\n                            <></>\n                          )}\n                          {field.type == 'email' ? (\n                            <>\n                              <label>{field.label}</label>\n                              <InputEmail\n                                name={field.name}\n                                id={field.id}\n                                placeholder={field.placeholder}\n                                validation={field.validation}\n                                autocomplete={field.autocomplete}\n                              />\n                            </>\n                          ) : (\n                            <></>\n                          )}\n                          {field.type == 'password' ? (\n                            <>\n                              <label>{field.label}</label>\n                              <InputPassword\n                                name={field.name}\n                                id={field.id}\n                                placeholder={field.placeholder}\n                                validation={field.validation}\n                                autocomplete={field.autocomplete}\n                              />\n                            </>\n                          ) : (\n                            <></>\n                          )}\n                          {field.type == 'select' ? (\n                            <>\n                              <label>{field.label}</label>\n                              <InputSelect\n                                name={field.name}\n                                id={field.id}\n                                placeholder={field.placeholder}\n                                validation={field.validation}\n                                autocomplete={field.autocomplete}\n                                data={field.data}\n                                fetchDataFromUrl={field.fetchDataFromUrl}\n                              />\n                            </>\n                          ) : (\n                            <></>\n                          )}\n                          {field.type == 'textarea' ? (\n                            <>\n                              <label>{field.label}</label>\n                              <InputTextarea\n                                name={field.name}\n                                id={field.id}\n                                placeholder={field.placeholder}\n                                validation={field.validation}\n                                autocomplete={field.autocomplete}\n                              />\n                            </>\n                          ) : (\n                            <></>\n                          )}\n                          {field.type == 'checkbox' ? (\n                            <>\n                              <label>{field.label}</label>\n                              <InputCheckbox\n                                name={field.name}\n                                id={field.id}\n                                placeholder={field.placeholder}\n                                validation={field.validation}\n                                autocomplete={field.autocomplete}\n                              />\n                            </>\n                          ) : (\n                            <></>\n                          )}\n                        </>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            );\n          },\n        )}\n    </div>\n  );\n};\n","import React, { ReactElement } from 'react';\nimport { FormHeadingProps } from './types';\n\nexport const FormHeading: React.FC<FormHeadingProps> = (\n  props: FormHeadingProps,\n): ReactElement => {\n  const { title, subTitle } = props;\n\n  const newLine = (string: string): JSX.Element[] => {\n    if (!string) {\n      return [<></>];\n    }\n    const ret = string\n      .split('\\n')\n      .map((str: string, index: number) => <p key={index}>{str}</p>);\n    return ret;\n  };\n\n  if (title === '' && subTitle === '') {\n    return <></>;\n  }\n\n  if (title === '') {\n    return (\n      <div className=\"row\">\n        <h3 className=\"fg__subtitle\">{newLine(subTitle as string)}</h3>\n      </div>\n    );\n  }\n\n  if (subTitle === '') {\n    return (\n      <div className=\"row\">\n        <h3 className=\"fg__title\">{title}</h3>\n      </div>\n    );\n  }\n\n  return (\n    <header>\n      <h3 className=\"fg__title\">{title}</h3>\n      <p className=\"fg__subtitle\">{subTitle}</p>\n    </header>\n  );\n};\n\nexport default FormHeading;\n","// Core\nimport React, { ReactElement, useEffect, useState } from 'react';\n\n// Third packages\n// import { useForm, FormProvider, useFormContext } from \"react-hook-form\";\n\n// Custom package\nimport { getLayoutColClass } from './Helpers';\nimport { ButtonSubmit } from './types';\nconst FormButonSubmit: React.FC<ButtonSubmit> = (\n  props: ButtonSubmit,\n): ReactElement => {\n  const [loading, setLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    setLoading(true);\n  }, [loading]);\n\n  const rowClass = getLayoutColClass(props?.layout ? props.layout : '1/4');\n  const btnText = props?.text ? props.text : 'Invia';\n  const btnClasses = 'fg__button-submit ' + props?.class ? props.class : ' ';\n  const btnId = props?.id ? props.id : '';\n\n  return (\n    <div className=\"row\">\n      <div className={rowClass}>\n        <div\n          className={\n            'fg__button-submit-wrapper ' + (loading ? 'with-loader ' : ' ')\n          }\n        >\n          {!props?.dom ? (\n            <input\n              type=\"submit\"\n              id={btnId}\n              className={btnClasses}\n              value={btnText}\n            />\n          ) : (\n            <></>\n          )}\n          {props?.dom && props.dom == 'input' ? (\n            <input\n              type=\"submit\"\n              id={btnId}\n              className={btnClasses}\n              value={btnText}\n            />\n          ) : (\n            <></>\n          )}\n          {props?.dom && props.dom == 'button' ? (\n            <button type=\"submit\" id={btnId} className={btnClasses}>\n              {btnText}\n            </button>\n          ) : (\n            <></>\n          )}\n          {props?.loading == false ? (\n            <></>\n          ) : (\n            <div className={'loader ' + (loading ? 'loader-active ' : ' ')}>\n              <span></span>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FormButonSubmit;\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React, { ReactElement, useCallback } from 'react';\n\n// Third packages\nimport { useForm, FormProvider } from 'react-hook-form';\n\n// Custom packages\nimport { FormFields } from './FormFields';\nimport { FormHeading } from './FormHeading';\nimport FormButonSubmit from './FormButtonSubmit';\nimport { onSubmitBackendCall } from './Helpers';\n\n// Import styles - With rollup add this as external in package.json\nimport './scss/styles.scss';\nimport { MagicFormGeneratorProps } from './types';\n\nexport const MagicFormGenerator: React.FC<MagicFormGeneratorProps> = (\n  props: MagicFormGeneratorProps,\n): ReactElement => {\n  const { form } = props;\n  const { submit, buttonSubmit } = form;\n\n  // const [loading, setLoading] = useState<boolean>(false);\n\n  const methods = useForm();\n\n  // NB: Visto che la callback del form è sempre uguale posso memorizzarla\n  const handleSubmit = useCallback(async (data: any) => {\n    // If callbck exists edit data in callback\n    const dataBeforeSubmit = submit.onSubmit ? submit.onSubmit(data) : data;\n\n    // If submitbackend is enabled send ajax data\n    if (submit.backend) {\n      // const res =\n      await onSubmitBackendCall(\n        submit.endpoint,\n        submit.method,\n        dataBeforeSubmit,\n      );\n    }\n  }, []);\n\n  return (\n    <FormProvider {...methods}>\n      <div id=\"MagicFormGenerator\">\n        <form onSubmit={methods.handleSubmit(handleSubmit)} noValidate>\n          <FormHeading title={form.title} subTitle={form.subTitle} />\n          <FormFields fields={form.fields} />\n          <FormButonSubmit {...buttonSubmit} />\n        </form>\n      </div>\n    </FormProvider>\n  );\n};\n\nexport default MagicFormGenerator;\n"],"names":["InputCheckbox","props","register","errors","setValue","trigger","useFormContext","validation","setValidation","useState","checkboxValue","setCheckboxValue","useEffect","rawValidation","React","className","id","type","name","checked","onChange","_value","autoComplete","autocomplete","ref","onClick","dangerouslySetInnerHTML","__html","placeholder","message","InputEmail","watch","setError","clearErrors","minLength","setMinLength","maxLength","setMaxLength","value","parseInt","undefined","equalTo","equalToField","validate","pattern","InputPassword","getLayoutValue","layout","getLayoutColClass","InputSelect","loading","setLoading","optionData","setOptionData","defaultValue","setDefaultValue","flag","required","data","length","fetchDataFromUrl","async","res","url","options","response","fetch","status","json","error","fetchData","fetchEffectData","getDefaultValue","disabled","map","option","index","key","label","InputText","InputTextarea","FormFields","fields","rowFields","setRowFields","row","val","fieldsTemp","field","fieldLayout","currentVal","push","nextFieldVal","colName","FormHeading","title","subTitle","string","split","str","FormButonSubmit","rowClass","btnText","text","btnClasses","class","btnId","dom","css","insertAt","document","head","getElementsByTagName","style","createElement","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","form","submit","buttonSubmit","methods","useForm","handleSubmit","useCallback","dataBeforeSubmit","onSubmit","backend","method","getParams","URLSearchParams","body","onSubmitBackendCall","endpoint","FormProvider","noValidate"],"mappings":"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"}